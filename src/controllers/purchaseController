const sequelize = require("../config/database");
const { User, Purchase } = require("../models/index");
const auth = require("../middleware/auth");
const axios = require("axios");
require("dotenv").config();

exports.newPurchase = async (req, res) => {
  try {
    const userId = req.userId;
    const amount = 99;
    const user = await User.findByPk(userId);
    const email = user ? user.email : "test@example.com";
    const orderId = `order_${Math.random().toString(36).substr(2, 9)}`;
    console.log("Calling Cashfree Order API...");
    console.log("Payload being sent to Cashfree:", {
      order_id: orderId,
      order_amount: amount.toString(),
      order_currency: "INR",
      customer_details: {
        customer_id: `user_${userId}`,
        customer_email: email,
        customer_phone: "9449009423",
      },
      order_meta: {
        return_url: `http://localhost:3000/?orderId=${orderId}`,
        payment_methods: "cc,dc,upi",
      },
    });
    const orderResponse = await axios.post(
      "https://sandbox.cashfree.com/pg/orders",
      {
        order_id: orderId,
        order_amount: amount.toString(),
        order_currency: "INR",
        customer_details: {
          customer_id: `user_${userId}`,
          customer_email: email,
          customer_phone: "9449009423",
        },
        order_meta: {
          return_url: `http://localhost:3000/?orderId=${orderId}`,
          payment_methods: "cc,dc,upi",
        },
      },
      {
        headers: {
          "x-api-version": "2022-09-01",
          "x-client-id": process.env.CASHFREE_CLIENT_ID,
          "x-client-secret": process.env.CASHFREE_CLIENT_SECRET,
          "Content-Type": "application/json",
        },
      }
    );

    const paymentSessionId = orderResponse.data?.payment_session_id;
    if (!paymentSessionId) {
      return res
        .status(500)
        .json({ success: false, message: "Failed to create order" });
    }

    await Purchase.create({
      userId,
      orderId,
      paymentId: "",
      status: "PENDING",
      amount,
    });

    return res.status(201).json({
      success: true,
      message: "Order Created",
      orderId,
      paymentSessionId,
    });
  } catch (error) {
    console.error("Purchase error : ", error);
    res.status(500).json({
      success: false,
      message: "Something went wrong",
      error: error.response?.data || error.message || "Unknown error",
    });
  }
};

exports.purchaseStatus = async (req, res) => {
  try {
    const orderId = req.query.orderId;
    const checkOrder = await Purchase.findOne({ where: { orderId } });
    const userId = checkOrder.userId;
    if (!checkOrder) {
      return res
        .status(404)
        .json({ success: false, message: "Order not found" });
    }
    const paymentStatus = await axios.get(
      `https://sandbox.cashfree.com/pg/orders/${orderId}`,
      {
        headers: {
          "x-client-id": process.env.CASHFREE_CLIENT_ID,
          "x-client-secret": process.env.CASHFREE_CLIENT_SECRET,
          "x-api-version": "2022-09-01",
        },
      }
    );
    if (!paymentStatus) {
      return res.status(500).json({
        success: false,
        message: "Error in getting the Payment status",
      });
    }
    const paymentDetails = paymentStatus.data?.payments?.[0];
    const updatedOrder = {};
    updatedOrder.paymentId = paymentDetails.payment_id;
    updatedOrder.status = paymentStatus.data?.order_status;
    await Purchase.update(updatedOrder, { where: { orderId } });
    if (updatedOrder.status !== "SUCCESS") {
      return res
        .status(500)
        .json({ success: false, message: "Order not successful" });
    }
    await User.update({ isPremium: true }, { where: { id: userId } });
    res.status(200).json({ success: true, message: "Order succesfull" });
  } catch (error) {
    console.error("Order status error:", error.message);
    res.status(500).json({
      success: false,
      message: "Something went wrong",
      error: error.message,
    });
  }
};
