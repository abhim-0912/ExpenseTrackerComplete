const sequelize = require("../config/database");
const { User, Purchase } = require("../models/index");
const axios = require("axios");
const jwt = require("jsonwebtoken");
require("dotenv").config();

exports.newPurchase = async (req, res) => {
  try {
    const userId = req.userId;
    const amount = 99;

    const user = await User.findByPk(userId);
    const email = user?.email || "test@example.com";

    const orderId = `order_${Math.random().toString(36).substr(2, 9)}`;

    const orderResponse = await axios.post(
      "https://sandbox.cashfree.com/pg/orders",
      {
        order_id: orderId,
        order_amount: amount.toString(),
        order_currency: "INR",
        customer_details: {
          customer_id: `user_${userId}`,
          customer_email: email,
          customer_phone: "9449009423",
        },
        order_meta: {
          return_url: `http://localhost:3000/payment-success.html?orderId=${orderId}`,
          payment_methods: "cc,dc,upi",
        },
      },
      {
        headers: {
          "x-api-version": "2022-09-01",
          "x-client-id": process.env.CASHFREE_CLIENT_ID,
          "x-client-secret": process.env.CASHFREE_CLIENT_SECRET,
          "Content-Type": "application/json",
        },
      }
    );

    const paymentSessionId = orderResponse.data?.payment_session_id;
    if (!paymentSessionId) {
      return res
        .status(500)
        .json({ success: false, message: "Failed to create order" });
    }

    await Purchase.create({
      userId,
      orderId,
      paymentId: "",
      status: "PENDING",
      amount,
    });

    return res.status(201).json({
      success: true,
      message: "Order Created",
      orderId,
      paymentSessionId,
    });
  } catch (error) {
    console.error("Purchase error:", error);
    res.status(500).json({
      success: false,
      message: "Something went wrong",
      error: error.response?.data || error.message,
    });
  }
};

exports.verifyPayment = async (req, res) => {
  try {
    const user = await User.findByPk(req.userId);
    if (!user) {
      return res
        .status(404)
        .json({ success: false, message: "User not found" });
    }

    if (user.isPremium) {
      return res.json({
        success: false,
        message: "User already premium",
      });
    }

    const lastOrder = await Purchase.findOne({
      where: { userId: req.userId },
      order: [["createdAt", "DESC"]],
    });

    if (!lastOrder) {
      return res.json({ success: false, message: "No order found" });
    }

    const paymentStatus = await axios.get(
      `https://sandbox.cashfree.com/pg/orders/${lastOrder.orderId}`,
      {
        headers: {
          "x-client-id": process.env.CASHFREE_CLIENT_ID,
          "x-client-secret": process.env.CASHFREE_CLIENT_SECRET,
          "x-api-version": "2022-09-01",
        },
      }
    );
    const status = paymentStatus.data?.order_status;
    if (status === "PAID" || status === "SUCCESS") {
      console.log(paymentStatus.data);
      await Purchase.update(
        {
          paymentId: paymentStatus.data?.payments?.[0]?.payment_id || "UNKNOWN",
          status: "SUCCESS",
        },
        { where: { orderId: lastOrder.orderId } }
      );

      await User.update({ isPremium: true }, { where: { id: req.userId } });

      const newToken = jwt.sign(
        { id: user.id, isPremium: true },
        process.env.JWT_SECRET
      );

      return res.json({
        success: true,
        message: "User upgraded",
        newToken,
      });
    }

    return res.json({
      success: false,
      message: "Payment not successful yet",
    });
  } catch (error) {
    console.error("Verify payment error:", error.message);
    res.status(500).json({
      success: false,
      message: "Error verifying payment",
    });
  }
};
