import { update } from "lodash";
import { message } from "statuses";

const sequelize = require("../config/database");
const { User, Expense, Purchase } = require("../models/index");
const auth = require("../middleware/auth");

exports.newPurchase = async (req, res) => {
  try {
    const userId = req.userId;
    const amount = 99;
    const user = await User.findByPk(userId);
    const email = user ? user.email : "test@example.com";

    const authResponse = await axios.post(
      "https://sandbox.cashfree.com/pg/v1/authenticate",
      {},
      {
        headers: {
          "x-client-id": process.env.CASHFREE_CLIENT_ID,
          "x-client-secret": process.env.CASHFREE_CLIENT_SECRET,
        },
      }
    );

    const cftoken = authResponse.data?.data?.token;
    if (!cftoken) {
      return res
        .status(500)
        .json({ success: false, message: "Failed to get Cashfree token" });
    }

    const orderId = `order_${Math.random().toString(36).substr(2, 9)}`;
    const orderResponse = await axios.post(
      "https://sandbox.cashfree.com/pg/orders",
      {
        order_id: orderId,
        order_amount: amount,
        order_currency: "INR",
        customer_details: {
          customer_id: `user_${userId}`,
          customer_email: email,
        },
      },
      {
        headers: {
          "x-api-version": "2022-09-01",
          "x-client-id": process.env.CASHFREE_CLIENT_ID,
          "x-client-secret": process.env.CASHFREE_CLIENT_SECRET,
          "Content-Type": "application/json",
        },
      }
    );

    const paymentLink = orderResponse.data?.payment_link;
    if (!paymentLink) {
      return res
        .status(500)
        .json({ success: false, message: "Failed to create order" });
    }

    await Purchase.create({
      userId,
      orderId,
      paymentId: "",
      status: "PENDING",
      amount,
    });

    return res.status(201).json({
      success: true,
      message: "Order Created",
      orderId,
      paymentLink,
    });
  } catch (error) {
    console.error("Purchase error:", error.message);
    res.status(500).json({
      success: false,
      message: "Something went wrong",
      error: error.message,
    });
  }
};

exports.pruchaseStatus = async (req, res) => {
  try {
    const orderId = req.query.orderId;
    const checkOrder = await Purchase.findOne({ where: { orderId } });
    const userId = checkOrder.userId;
    if (!checkOrder) {
      return res
        .status(404)
        .json({ success: false, message: "Order not found" });
    }
    const paymentStatus = await axios.get(
      `https://sandbox.cashfree.com/pg/orders/${orderId}`,
      {
        headers: {
          "x-client-id": process.env.CASHFREE_CLIENT_ID,
          "x-client-secret": process.env.CASHFREE_CLIENT_SECRET,
          "x-api-version": "2022-09-01",
        },
      }
    );
    if (!paymentStatus) {
      return res
        .status(500)
        .json({
          success: false,
          message: "Error in getting the Payment status",
        });
    }
    const paymentDetails = paymentStatus.data?.payments?.[0];
    const updatedOrder = {};
    updatedOrder.paymentId = paymentDetails.payment_id;
    updatedOrder.status = paymentStatus.data?.order_status;
    await Purchase.update(updatedOrder, { where: { orderId } });
    if (updatedOrder.status !== "SUCCESS") {
      return res
        .status(500)
        .json({ success: false, message: "Order not successful" });
    }
    await User.update({isPremium: true},{where: {id : userId}});
    res.status(200).json({success: true, message: "Order succesfull"});
  } catch (error) {
    console.error("Order status error:", error.message);
    res.status(500).json({
      success: false,
      message: "Something went wrong",
      error: error.message,
    });
  }
};
